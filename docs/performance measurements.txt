Methodology
=====================================
The test creates a new cache, creates N objects at M objects each and inserts them, and then fetches them, one by one by key. Time is measured for total execution, calculated per object, and per byte.

Test is run on my MacBook Pro Intel Core 2 Duo 2.5GHz with 6GB of RAM after a fresh reboot, with only Xcode and the test running.

Key
-----------
   500 objs @     100b: create(2.96398s/0.00593s/0.000059s) fetch(0.49415s/0.00099s/0.000010s)
Obj count          creation time: total/per obj /per byte
            size of each                                lookup time: total/per obj /per byte

Summary
============================
Inserting
----------------------------
Insertion time decreases with the number of objects up 'til ~10k objects, whereafter my limited data seems to indicate a linear (O(n)) relationship. On average about 5ms for the first kb, and then proportional to log(n).

Fetching
----------------------------
Fetch time per object stays almost constant with number of objects, and decreases per byte with larger objects. There is a small penalty for decryption, however.

Without caching size of cache
=====================================
With the code at this stage, I did an SQL lookup of the size of the cache on every write (to make sure we don't overstep bounds). This was a huge bottleneck, from 20% with few objects up to 70% with many objects. 

By size
    500 objs @     100b: create(2.96398s/0.00593s/0.000059s) fetch(0.49415s/0.00099s/0.000010s)
    500 objs @    1000b: create(2.30375s/0.00461s/0.000005s) fetch(0.46083s/0.00092s/0.000001s)
    500 objs @    2000b: create(2.47887s/0.00496s/0.000002s) fetch(0.45943s/0.00092s/0.000000s)
    500 objs @    5000b: create(4.20368s/0.00841s/0.000002s) fetch(0.42553s/0.00085s/0.000000s)
    500 objs @   10000b: create(8.77419s/0.01755s/0.000002s) fetch(0.44752s/0.00090s/0.000000s)
    500 objs @   20000b: create(16.24334s/0.03249s/0.000002s) fetch(0.66163s/0.00132s/0.000000s)
    500 objs @   50000b: create(23.48019s/0.04696s/0.000001s) fetch(0.65732s/0.00131s/0.000000s)
By object count
     10 objs @    1000b: create(0.05313s/0.00531s/0.000005s) fetch(0.00597s/0.00060s/0.000001s)
    100 objs @    1000b: create(0.48947s/0.00489s/0.000005s) fetch(0.08782s/0.00088s/0.000001s)
   1000 objs @    1000b: create(4.76029s/0.00476s/0.000005s) fetch(0.94520s/0.00095s/0.000001s)
   2000 objs @    1000b: create(24.66346s/0.01233s/0.000012s) fetch(1.85021s/0.00093s/0.000001s)
   5000 objs @    1000b: create(158.65789s/0.03173s/0.000032s) fetch(17.40461s/0.00348s/0.000003s)
  10000 objs @    1000b: create(496.43337s/0.04964s/0.000050s) fetch(10.10658s/0.00101s/0.000001s)
// Test aborted, would take too long to complete


With size caching, without encryption
=====================================
In this version, the cache size is fetched only once, and then class then duplicates that state and recalculates it during writes and deletes, removing the bottleneck completely. However, the final requirement of the assignment (on-disk encryption) is still not performed.

By size
    500 objs @     100b: create(  2.42638s/  0.00485s/  0.0000485277s) fetch(  0.48700s/  0.00097s/  0.0000097401s)
    500 objs @    1000b: create(  2.66909s/  0.00534s/  0.0000053382s) fetch(  0.47796s/  0.00096s/  0.0000009559s)
    500 objs @    2000b: create(  2.88810s/  0.00578s/  0.0000028881s) fetch(  0.50005s/  0.00100s/  0.0000005001s)
    500 objs @    5000b: create(  2.60439s/  0.00521s/  0.0000010418s) fetch(  0.53626s/  0.00107s/  0.0000002145s)
    500 objs @   10000b: create(  4.40043s/  0.00880s/  0.0000008801s) fetch(  0.60070s/  0.00120s/  0.0000001201s)
    500 objs @   20000b: create(  6.02110s/  0.01204s/  0.0000006021s) fetch(  0.82213s/  0.00164s/  0.0000000822s)
    500 objs @   50000b: create( 10.68230s/  0.02136s/  0.0000004273s) fetch(  0.90462s/  0.00181s/  0.0000000362s)
By object count
     10 objs @    1000b: create(  0.06445s/  0.00645s/  0.0000064451s) fetch(  0.00627s/  0.00063s/  0.0000006267s)
    100 objs @    1000b: create(  0.55267s/  0.00553s/  0.0000055267s) fetch(  0.11286s/  0.00113s/  0.0000011286s)
   1000 objs @    1000b: create(  5.02292s/  0.00502s/  0.0000050229s) fetch(  1.00080s/  0.00100s/  0.0000010008s)
   2000 objs @    1000b: create(  8.86316s/  0.00443s/  0.0000044316s) fetch(  1.99920s/  0.00100s/  0.0000009996s)
   5000 objs @    1000b: create( 20.94050s/  0.00419s/  0.0000041881s) fetch(  5.05317s/  0.00101s/  0.0000010106s)
  10000 objs @    1000b: create( 42.24781s/  0.00422s/  0.0000042248s) fetch(  9.69319s/  0.00097s/  0.0000009693s)
  20000 objs @    1000b: create( 92.18352s/  0.00461s/  0.0000046092s) fetch( 20.08424s/  0.00100s/  0.0000010042s)
  50000 objs @    1000b: create(299.43282s/  0.00599s/  0.0000059887s) fetch( 53.33055s/  0.00107s/  0.0000010666s)

By size
    500 objs @     100b: create(  2.30220s/  0.00460s/  0.0000460439s) fetch(  0.51339s/  0.00103s/  0.0000102679s)
    500 objs @    1000b: create(  2.82210s/  0.00564s/  0.0000056442s) fetch(  0.50205s/  0.00100s/  0.0000010041s)
    500 objs @    2000b: create(  7.58953s/  0.01518s/  0.0000075895s) fetch(  0.52841s/  0.00106s/  0.0000005284s)
    500 objs @    5000b: create(  2.49126s/  0.00498s/  0.0000009965s) fetch(  0.56229s/  0.00112s/  0.0000002249s)
    500 objs @   10000b: create(  4.39118s/  0.00878s/  0.0000008782s) fetch(  0.42732s/  0.00085s/  0.0000000855s)
    500 objs @   20000b: create(  6.01110s/  0.01202s/  0.0000006011s) fetch(  0.69238s/  0.00138s/  0.0000000692s)
    500 objs @   50000b: create( 10.59163s/  0.02118s/  0.0000004237s) fetch(  1.15561s/  0.00231s/  0.0000000462s)
By object count
     10 objs @    1000b: create(  0.04336s/  0.00434s/  0.0000043356s) fetch(  0.00892s/  0.00089s/  0.0000008917s)
    100 objs @    1000b: create(  0.57238s/  0.00572s/  0.0000057238s) fetch(  0.10929s/  0.00109s/  0.0000010929s)
   1000 objs @    1000b: create(  5.14861s/  0.00515s/  0.0000051486s) fetch(  0.99773s/  0.00100s/  0.0000009977s)
   2000 objs @    1000b: create(  9.83029s/  0.00492s/  0.0000049151s) fetch(  2.04882s/  0.00102s/  0.0000010244s)
   5000 objs @    1000b: create( 24.05959s/  0.00481s/  0.0000048119s) fetch(  5.26320s/  0.00105s/  0.0000010526s)
  10000 objs @    1000b: create( 45.55709s/  0.00456s/  0.0000045557s) fetch( 14.47120s/  0.00145s/  0.0000014471s)
  20000 objs @    1000b: create(113.76738s/  0.00569s/  0.0000056884s) fetch( 20.58638s/  0.00103s/  0.0000010293s)
  50000 objs @    1000b: create(332.77597s/  0.00666s/  0.0000066555s) fetch( 52.27368s/  0.00105s/  0.0000010455s)


With encryption
=====================================
Very rudimentary encryption is added.

By size
    500 objs @     100b: create(  1.96517s/  0.00393s/  0.0000393034s) fetch(  0.31062s/  0.00062s/  0.0000062125s)
    500 objs @    1000b: create(  2.66410s/  0.00533s/  0.0000053282s) fetch(  0.58731s/  0.00117s/  0.0000011746s)
    500 objs @    2000b: create(  3.05892s/  0.00612s/  0.0000030589s) fetch(  0.66909s/  0.00134s/  0.0000006691s)
    500 objs @    5000b: create(  2.90061s/  0.00580s/  0.0000011602s) fetch(  0.91962s/  0.00184s/  0.0000003678s)
    500 objs @   10000b: create(  4.99297s/  0.00999s/  0.0000009986s) fetch(  1.23068s/  0.00246s/  0.0000002461s)
    500 objs @   20000b: create(  9.14835s/  0.01830s/  0.0000009148s) fetch(  1.88540s/  0.00377s/  0.0000001885s)
    500 objs @   50000b: create( 13.43923s/  0.02688s/  0.0000005376s) fetch(  4.19556s/  0.00839s/  0.0000001678s)
By object count
     10 objs @    1000b: create(  0.04253s/  0.00425s/  0.0000042529s) fetch(  0.01635s/  0.00164s/  0.0000016351s)
    100 objs @    1000b: create(  0.50392s/  0.00504s/  0.0000050392s) fetch(  0.10236s/  0.00102s/  0.0000010236s)
   1000 objs @    1000b: create(  4.30692s/  0.00431s/  0.0000043069s) fetch(  1.15766s/  0.00116s/  0.0000011577s)
   2000 objs @    1000b: create(  9.02126s/  0.00451s/  0.0000045106s) fetch(  2.13421s/  0.00107s/  0.0000010671s)
   5000 objs @    1000b: create( 20.98195s/  0.00420s/  0.0000041964s) fetch(  5.48959s/  0.00110s/  0.0000010979s)
  10000 objs @    1000b: create( 43.13639s/  0.00431s/  0.0000043136s) fetch( 10.20566s/  0.00102s/  0.0000010206s)
  20000 objs @    1000b: create( 91.38918s/  0.00457s/  0.0000045695s) fetch( 22.68446s/  0.00113s/  0.0000011342s)
  50000 objs @    1000b: create(298.38188s/  0.00597s/  0.0000059676s) fetch( 60.67201s/  0.00121s/  0.0000012134s)

By size
    500 objs @     100b: create(  2.39541s/  0.00479s/  0.0000479082s) fetch(  0.54251s/  0.00109s/  0.0000108501s)
    500 objs @    1000b: create(  2.62902s/  0.00526s/  0.0000052580s) fetch(  0.54960s/  0.00110s/  0.0000010992s)
    500 objs @    2000b: create(  2.75994s/  0.00552s/  0.0000027599s) fetch(  0.62487s/  0.00125s/  0.0000006249s)
    500 objs @    5000b: create(  3.02320s/  0.00605s/  0.0000012093s) fetch(  0.95557s/  0.00191s/  0.0000003822s)
    500 objs @   10000b: create(  5.20397s/  0.01041s/  0.0000010408s) fetch(  1.34274s/  0.00269s/  0.0000002685s)
    500 objs @   20000b: create( 13.60535s/  0.02721s/  0.0000013605s) fetch(  2.05671s/  0.00411s/  0.0000002057s)
    500 objs @   50000b: create( 14.75308s/  0.02951s/  0.0000005901s) fetch(  4.22182s/  0.00844s/  0.0000001689s)
By object count
     10 objs @    1000b: create(  0.06882s/  0.00688s/  0.0000068817s) fetch(  0.01080s/  0.00108s/  0.0000010800s)
    100 objs @    1000b: create(  0.51833s/  0.00518s/  0.0000051833s) fetch(  0.10994s/  0.00110s/  0.0000010994s)
   1000 objs @    1000b: create(  4.68460s/  0.00468s/  0.0000046846s) fetch(  1.11285s/  0.00111s/  0.0000011128s)
   2000 objs @    1000b: create(  9.73537s/  0.00487s/  0.0000048677s) fetch(  2.20078s/  0.00110s/  0.0000011004s)
   5000 objs @    1000b: create( 21.53558s/  0.00431s/  0.0000043071s) fetch(  5.57149s/  0.00111s/  0.0000011143s)
  10000 objs @    1000b: create( 44.19736s/  0.00442s/  0.0000044197s) fetch( 12.65481s/  0.00127s/  0.0000012655s)
  20000 objs @    1000b: create(100.78932s/  0.00504s/  0.0000050395s) fetch( 23.78673s/  0.00119s/  0.0000011893s)
  50000 objs @    1000b: create(300.10556s/  0.00600s/  0.0000060021s) fetch( 61.82294s/  0.00124s/  0.0000012365s)


